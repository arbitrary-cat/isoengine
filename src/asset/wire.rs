// automatically generated by the FlatBuffers compiler, do not modify

use flatbuffers as fb;

pub struct AssetManifest {
    inner: fb::Table,
}

impl AssetManifest {
    pub fn sprite_sheets(&self) -> Option<&fb::Vector<fb::Offset<::grafix::sprite::wire::SpriteSheetDesc>, &::grafix::sprite::wire::SpriteSheetDesc>> {
        self.inner.get_ref(4)
    }
    pub fn anims(&self) -> Option<&fb::Vector<fb::Offset<::grafix::anim::wire::Anim>, &::grafix::anim::wire::Anim>> {
        self.inner.get_ref(6)
    }
}

pub struct AssetManifestBuilder<'x> {
    fbb:   &'x mut fb::FlatBufferBuilder,
    start: fb::UOffset,
}

impl<'x> AssetManifestBuilder<'x> {
    pub fn new(fbb: &'x mut fb::FlatBufferBuilder) -> AssetManifestBuilder<'x> {
        let start = fbb.start_table();
        AssetManifestBuilder {
            fbb:   fbb,
            start: start,
        }
    }

    pub fn add_sprite_sheets(&mut self, sprite_sheets: fb::Offset<fb::Vector<fb::Offset<::grafix::sprite::wire::SpriteSheetDesc>, &::grafix::sprite::wire::SpriteSheetDesc>>) {
        self.fbb.add_offset(4, sprite_sheets)
    }

    pub fn add_anims(&mut self, anims: fb::Offset<fb::Vector<fb::Offset<::grafix::anim::wire::Anim>, &::grafix::anim::wire::Anim>>) {
        self.fbb.add_offset(6, anims)
    }

    pub fn finish(&mut self) -> fb::Offset<AssetManifest> {
        let o = fb::Offset::new(self.fbb.end_table(self.start, 2));
        // self.fbb.required(o, 4);  // sprite_sheets
        // self.fbb.required(o, 6);  // anims
        o
    }
}

