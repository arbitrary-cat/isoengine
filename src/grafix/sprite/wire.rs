// automatically generated by the FlatBuffers compiler, do not modify

use flatbuffers as fb;

pub struct SpriteSheetDesc {
    inner: fb::Table,
}

impl SpriteSheetDesc {
    pub fn name(&self) -> Option<&fb::String> {
        self.inner.get_ref(4)
    }
    pub fn img_width(&self) -> u16 {
        self.inner.get_field(6, 0)
    }
    pub fn img_height(&self) -> u16 {
        self.inner.get_field(8, 0)
    }
    pub fn origin_x(&self) -> u16 {
        self.inner.get_field(10, 0)
    }
    pub fn origin_y(&self) -> u16 {
        self.inner.get_field(12, 0)
    }
    pub fn spr_width(&self) -> u16 {
        self.inner.get_field(14, 0)
    }
    pub fn spr_height(&self) -> u16 {
        self.inner.get_field(16, 0)
    }
    pub fn num_across(&self) -> u16 {
        self.inner.get_field(18, 0)
    }
    pub fn num_down(&self) -> u16 {
        self.inner.get_field(20, 0)
    }
    pub fn total(&self) -> u16 {
        self.inner.get_field(22, 0)
    }
    pub fn color_path(&self) -> Option<&fb::String> {
        self.inner.get_ref(24)
    }
    pub fn depth_path(&self) -> Option<&fb::String> {
        self.inner.get_ref(26)
    }
}

pub struct SpriteSheetDescBuilder<'x> {
    fbb:   &'x mut fb::FlatBufferBuilder,
    start: fb::UOffset,
}

impl<'x> SpriteSheetDescBuilder<'x> {
    pub fn new(fbb: &'x mut fb::FlatBufferBuilder) -> SpriteSheetDescBuilder<'x> {
        let start = fbb.start_table();
        SpriteSheetDescBuilder {
            fbb:   fbb,
            start: start,
        }
    }

    pub fn add_name(&mut self, name: fb::Offset<fb::String>) {
        self.fbb.add_offset(4, name)
    }

    pub fn add_img_width(&mut self, img_width: u16) {
        self.fbb.add_scalar(6, img_width, 0)
    }

    pub fn add_img_height(&mut self, img_height: u16) {
        self.fbb.add_scalar(8, img_height, 0)
    }

    pub fn add_origin_x(&mut self, origin_x: u16) {
        self.fbb.add_scalar(10, origin_x, 0)
    }

    pub fn add_origin_y(&mut self, origin_y: u16) {
        self.fbb.add_scalar(12, origin_y, 0)
    }

    pub fn add_spr_width(&mut self, spr_width: u16) {
        self.fbb.add_scalar(14, spr_width, 0)
    }

    pub fn add_spr_height(&mut self, spr_height: u16) {
        self.fbb.add_scalar(16, spr_height, 0)
    }

    pub fn add_num_across(&mut self, num_across: u16) {
        self.fbb.add_scalar(18, num_across, 0)
    }

    pub fn add_num_down(&mut self, num_down: u16) {
        self.fbb.add_scalar(20, num_down, 0)
    }

    pub fn add_total(&mut self, total: u16) {
        self.fbb.add_scalar(22, total, 0)
    }

    pub fn add_color_path(&mut self, color_path: fb::Offset<fb::String>) {
        self.fbb.add_offset(24, color_path)
    }

    pub fn add_depth_path(&mut self, depth_path: fb::Offset<fb::String>) {
        self.fbb.add_offset(26, depth_path)
    }

    pub fn finish(&mut self) -> fb::Offset<SpriteSheetDesc> {
        let o = fb::Offset::new(self.fbb.end_table(self.start, 12));
        // self.fbb.required(o, 4);  // name
        // self.fbb.required(o, 24);  // color_path
        // self.fbb.required(o, 26);  // depth_path
        o
    }
}

